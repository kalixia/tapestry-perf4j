<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//LOGGER" "log4j.dtd">

<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

    <!-- Appenders -->
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <param name="Target" value="System.out"/>
        <layout class="org.apache.log4j.PatternLayout">
            <!--<param name="ConversionPattern" value="%-5p: %c - %m%n"/>-->
            <param name="ConversionPattern" value="%-5p %d - %C{1} : %m%n"/>
        </layout>
    </appender>

    <!-- Perf4J appenders -->
    <!-- START SNIPPET: perf4j-CoalescingStatistics -->
    <appender name="CoalescingStatistics" class="org.perf4j.log4j.AsyncCoalescingStatisticsAppender">
        <!--
          The TimeSlice option is used to determine the time window for which
          all received StopWatch logs are aggregated to create a single
          GroupedTimingStatistics log. Here we set it to 10 seconds, overriding
          the default of 30000 ms
        -->
        <!--<param name="TimeSlice" value="10000"/>-->
        <appender-ref ref="fileAppender"/>
        <appender-ref ref="graphExecutionTimes"/>
        <appender-ref ref="graphExecutionTPS"/>
        <appender-ref ref="perf4jJmxAppender"/>
    </appender>
    <!-- END SNIPPET: perf4j-CoalescingStatistics -->

    <!-- This file appender is used to output aggregated performance statistics -->
    <!-- START SNIPPET: perf4j-fileAppender -->
    <appender name="fileAppender" class="org.apache.log4j.FileAppender">
        <param name="File" value="perfStats.log"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%m%n"/>
        </layout>
    </appender>
    <!-- END SNIPPET: perf4j-fileAppender -->

    <!-- START SNIPPET: perf4j-graphAppenders -->
    <appender name="graphExecutionTimes" class="org.perf4j.log4j.GraphingStatisticsAppender">
        <!-- Possible GraphTypes are Mean, Min, Max, StdDev, Count and TPS -->
        <param name="GraphType" value="Mean"/>
        <!-- The tags of the timed execution blocks to graph are specified here -->
        <!--<param name="TagNamesToGraph" value="tag1,tag2,tag3"/>-->
    </appender>

    <appender name="graphExecutionTPS" class="org.perf4j.log4j.GraphingStatisticsAppender">
        <param name="GraphType" value="TPS"/>
        <!--<param name="TagNamesToGraph" value="tag1,tag2,tag3"/>-->
    </appender>
    <!-- END SNIPPET: perf4j-graphAppenders -->

    <!-- This JMX appender creates an MBean and publishes it to the platform MBean server by default. -->
    <appender name="perf4jJmxAppender" class="org.perf4j.log4j.JmxAttributeStatisticsAppender">
        <!-- You must specify the tag names whose statistics should be exposed as MBean attributes. -->
        <param name="TagNamesToExpose" value="messaging.tweets,twitter.favourites-count,twitter.favourites-feed,twitter.saved-searches,twitter.search-stream,twitter.search-results,twitter.create-favourite,twitter.destroy-favorite,twitter.retweet,cassandra.users.findByLogin,cassandra.users.findAll,cassandra.users.create,cassandra.queries.update,cassandra.queries.subscribe,cassandra.queries.findAll,cassandra.users.queries.findAll,cassandra.queries.addTweet,cassandra.queries.feed"/>
        <!--
          The NotificationThresholds param configures the sending of JMX notifications
          when statistic values exceed specified thresholds. This config states that
          the firstBlock max value should be between 0 and 800ms, and the secondBlock max
          value should be less than 1500 ms. You can also set thresholds on the Min,
          Mean, StdDev, Count and TPS statistics - e.g. firstBlockMean(<600).
        -->
        <!--<param name="NotificationThresholds" value="firstBlockMax(0-800),secondBlockMax(&lt;1500)"/>-->
        <!--
          You can also specify an optional MBeanName param, which overrides
          the default MBean name of org.perf4j:type=StatisticsExposingMBean,name=Perf4J
        -->
        <!--<param name="MBeanName" value="me.prettyprint.cassandra.service:type=perf4j,name=perf4j"/>-->
    </appender>

    <logger name="com.kalixia.tapestry">
        <level value="debug"/>
    </logger>

    <!-- START SNIPPET: perf4j-logger -->
    <!--
      The Perf4J logger. Note that org.perf4j.TimingLogger is the value of the
      org.perf4j.StopWatch.DEFAULT_LOGGER_NAME constant. Also, note that
      additivity is set to false, which is usually what is desired - this means
      that timing statements will only be sent to this logger and NOT to
      upstream loggers.
    -->
    <logger name="org.perf4j.TimingLogger" additivity="false">
        <level value="INFO"/>
        <appender-ref ref="CoalescingStatistics"/>
    </logger>
    <!-- END SNIPPET: perf4j-logger -->

    <!-- Root Logger -->
    <root>
        <priority value="warn"/>
        <appender-ref ref="console"/>
    </root>

</log4j:configuration>